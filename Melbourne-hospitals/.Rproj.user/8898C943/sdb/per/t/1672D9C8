{
    "collab_server" : "",
    "contents" : "# Developed by Mojdeh Shirazi-Manesh, 06/06/2017\n# Thanks to Dr. Anastasios Panagiotelis\n\n#Further improvements: \n#Removing other hospitals outside Melbourne.\n#including age, adding more option to select from\n#adding images,...\n\n##Load packages\nlibrary(shiny)\nlibrary(leaflet)\nlibrary(dplyr)\nlibrary(magrittr)#\nlibrary(tidyr)#\nlibrary(rgdal)#\nlibrary(rmapshaper)\n\nHospitals<-read.csv('HospitalLocations.csv')\nShape<-readRDS('GreaterMelbourneShape.rds')\nIncomes<-readRDS('IncomesMel.rds')#\n\n\npal <- colorNumeric(\"Reds\",NULL)\npalr <- colorNumeric(\"Reds\",reverse=TRUE, NULL)\nreverseLabelFormat = function(..., reverse_order = FALSE){ \n  if(reverse_order){ \n    function(type = \"numeric\", cuts){ \n      cuts <- sort(cuts, decreasing = T)\n    } \n  }else{\n    labelFormat(...)\n  }\n}\n\n\n\n#Color palette for occupations\ncols<-c(\"#000099\",\"#ff9900\" )\n\npals<-colorFactor(domain=c(\"PUBLIC\",\"PRIVATE\"))\n\n##User Interface\n\nui <- fluidPage(\n  \n#tags$img(\"1.jpg\"),\n  titlePanel(\"Hospital locations in Melbourne\"),\n\n  sidebarLayout(\n    sidebarPanel(\n      # Checkbox for hospital type\n            checkboxGroupInput(\"hospType\",label = h4(\"Select One or Both Hospital Types\"),\n                               choiceNames = list(p(\"PUBLIC\",span(icon('h-square'),style=paste0(\"color:\",cols[1]))),\n                                                  p(\"PRIVATE\", span(icon('h-square'),style=paste0(\"color:\",cols[2])))),\n                                                   \n                               choiceValues = list(\"PUBLIC\",\n                                                   \"PRIVATE\")),\n      # Select Input for income levels\n            selectInput(\"inc\", label = h3(\"Select Income level\"), \n                        choices = list(\"Negative - 42,000$\" = \"L42\", \n                                       \"42,000$ - 104,000$\" = \"L104\",\n                                       \"More than 104,000$\" = \"Lmore\"\n                                        ))##,\n      \n      \n\n ##     #Slider Input for Age Range\n##      sliderInput(\"Age\", label = h3(\"Age Range\"), min = 0, \n##                  max = 100, value = c(0, 100))\n      \n\n    ),\n  \n    \n    mainPanel(leafletOutput(\"lPlot\"))\n  ),\n  hr(),\n  p(\"Developed by Mojdeh Shirazi-Manesh, Monash University.\"),\n  p(\"Population and Income data were sourced from the Australian Bureau of Statistics, census 2011. Data on hospital locations were collected from Victorian Government Data Directory.  Coordinates for hospitals obtained using a geocoding tool from\", a(\"www.doogal.co.uk/BatchGeocoding.php\",href=\"https://www.doogal.co.uk/BatchGeocoding.php\",target=\"_blank\"))\n  \n)\n\nserver <- function(input, output) {\n\n  ## Stuff that changes when we select different hospital types\n    filteredHospitals<-reactive({\n      filter(Hospitals,Type %in% input$hospType)\n    })\n  \n\n    ## Stuff that changes when we select different income levels # or age\n      filtereddata<-reactive({\n      filter(Incomes,(Income==input$inc)) %>% #(Age>=input$Age[1])&(Age<=input$Age[2]))%>%\n        group_by(.,SA2)%>%\n        summarise(.,sum(Persons))%>%\n        rename(.,People=`sum(Persons)`,SA2_NAME11=SA2)->out\n      \n      Shape<-sp::merge(Shape,out,by=\"SA2_NAME11\",all.x=TRUE)\n    })\n    \n  \n  output$lPlot<-renderLeaflet({\n    leaflet() %>%\n      addProviderTiles(\"Esri.WorldTopoMap\")%>%\n      setView(lng=144.9631,lat=-37.8136,zoom=10)\n  })\n  ## Stuff that changes when we select different income levels\n  observe({\n    #Popup\n    sa2_popup <- paste0(\"<strong>SA2: </strong>\",\n                        filtereddata()$SA2_NAME11, \n                        \"<br><strong>People: </strong>\", \n                        filtereddata()$People)\n    leafletProxy(\"lPlot\",data=filtereddata())%>%\n      clearShapes()%>% #Prevent polygons simply being plotted over one another\n      clearControls()%>% #Clears any previous legend\n      addPolygons(fillColor = ~pal(People), \n                  fillOpacity = 0.4, \n                  color = \"#BDBDC3\", #color of SA2 boundary (light gray)\n                  weight = 1, #Thickness of SA2 Boundary\n                  popup = sa2_popup, # SA2 popup defined above\n                  highlightOptions=highlightOptions(color='black',weight=5))%>% #Dark black when mouse hovers\n      addLegend(.,pal = palr, \n                title = \"People\",\n                values=~People,\n                labFormat = reverseLabelFormat(reverse_order=TRUE)) #\n  })\n  \n  ## Stuff that changes when we select different hospital types\n  observe({\n    #Popup\n    hospitalpu <- paste0(\"<strong>Hospital: </strong>\",\n                         filteredHospitals()$OpsName,\n                         \"<br><strong>Campus Code: </strong>\",\n                         filteredHospitals()$CampusCode)\n    \n    #Function required to get icons having the right color\n \n    getColor <- function(dat) {\n      sapply(dat$Type, function(ty) {\n        if(ty == \"PUBLIC\") {\n          cols[1]\n        } else {\n          cols[2]\n        } })\n    }\n    \n    #Customise icon\n    icons <- awesomeIcons(\n      icon = 'h-square',\n      iconColor = getColor(filteredHospitals()),\n      library = 'fa',\n      markerColor = 'lightgray')\n    #Update map\n    leafletProxy(\"lPlot\")%>%\n      clearMarkers()%>%\n      addAwesomeMarkers(data=filteredHospitals(),\n                        lng = ~X,\n                        lat=~Y,\n                        icon=icons,\n                        popup = hospitalpu)\n    \n  })\n  \n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n\n",
    "created" : 1506705979132.000,
    "dirty" : false,
    "encoding" : "ISO8859-1",
    "folds" : "",
    "hash" : "664927891",
    "id" : "1672D9C8",
    "lastKnownWriteTime" : 1506824391,
    "last_content_update" : 1506824391074,
    "path" : "D:/Mojdeh/General Learning/R programming/Shiny/completed projects/app-hospitals.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}